<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lizhenzhu.vercel.app/</id>
    <title>Li Zhenzhu, Ph.D</title>
    <updated>2020-09-30T12:29:22.323Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lizhenzhu.vercel.app/"/>
    <link rel="self" href="https://lizhenzhu.vercel.app//atom.xml"/>
    <subtitle>Binzhou Medical University Hospital, Email: timeanddoctor@gmail.com.</subtitle>
    <logo>https://lizhenzhu.vercel.app//images/avatar.png</logo>
    <icon>https://lizhenzhu.vercel.app//favicon.ico</icon>
    <rights>All rights reserved 2020, Li Zhenzhu, Ph.D</rights>
    <entry>
        <title type="html"><![CDATA[修改最小参数的单位数]]></title>
        <id>https://lizhenzhu.vercel.app//post/zjq4xBm1o</id>
        <link href="https://lizhenzhu.vercel.app//post/zjq4xBm1o">
        </link>
        <updated>2020-09-30T12:28:18.000Z</updated>
        <content type="html"><![CDATA[<p>通过点击需要修改的参数位数，ctrl+-可以添加或删除一个0，比如在矩阵里面。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[模型的全自动注册方法]]></title>
        <id>https://lizhenzhu.vercel.app//post/mPNCtZYPS</id>
        <link href="https://lizhenzhu.vercel.app//post/mPNCtZYPS">
        </link>
        <updated>2020-09-30T12:24:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="get-input-and-output-nodes">Get input and output nodes</h1>
<p>sourceModel = getNode('Segment_1')
targetModel = getNode('Segment_2')
sourceToTargetTransform = slicer.mrmlScene.AddNewNodeByClass(&quot;vtkMRMLLinearTransformNode&quot;)</p>
<h1 id="register">Register</h1>
<p>import ModelRegistration
mrLogic = ModelRegistration.ModelRegistrationLogic()
mrLogic.run(sourceModel, targetModel, sourceToTargetTransform)</p>
<h1 id="show-results">Show results</h1>
<p>sourceModel.SetAndObserveTransformNodeID(sourceToTargetTransform.GetID())
sourceModel.GetDisplayNode().SetOpacity(0.5)
targetModel.GetDisplayNode().SetOpacity(0.5)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PLY文件的颜色映射]]></title>
        <id>https://lizhenzhu.vercel.app//post/pDIXtjf1e</id>
        <link href="https://lizhenzhu.vercel.app//post/pDIXtjf1e">
        </link>
        <updated>2020-09-30T12:22:54.000Z</updated>
        <content type="html"><![CDATA[<p>如果将文件导入到Meshlab中，则可以应用滤镜：将纹理转移为顶点颜色，然后将顶点颜色转移为面颜色，并导出为仅包含面颜色的新层网格。然后在3D Slicer中打开，转到“模型”，然后选中“ Scalars Visible”框，从下拉列表中选择RGB，它将加载。只要颜色是“面部颜色”，我也可以将它与obj一起使用。由于某种原因，如果将颜色保存在顶点中，它将无法正确读取颜色。</p>
<p>方法二、
将层文件作为模型加载，将jpg纹理文件作为体积加载，则可以使用Texture modelSlicerIGT扩展模块将纹理应用于模型。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[STL转为切片图片显示]]></title>
        <id>https://lizhenzhu.vercel.app//post/yJACQ9lnI</id>
        <link href="https://lizhenzhu.vercel.app//post/yJACQ9lnI">
        </link>
        <updated>2020-08-19T08:51:03.000Z</updated>
        <content type="html"><![CDATA[<p>stl_file_name = ...
output_file_name = ...
reference_volume_path = ...</p>
<p>referenceVolumeNode = slicer.util.loadVolume(reference_volume_path)
segmentationNode = slicer.util.loadSegmentation(stl_file_name)
outputLabelmapVolumeNode = slicer.mrmlScene.AddNewNodeByClass('vtkMRMLLabelMapVolumeNode')
slicer.modules.segmentations.logic().ExportVisibleSegmentsToLabelmapNode(segmentationNode, outputLabelmapVolumeNode, referenceVolumeNode)
slicer.util.saveNode(outputLabelmapVolumeNode, output_file_name)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[3d slicer中通过鼠标点选显示模型的名字]]></title>
        <id>https://lizhenzhu.vercel.app//post/YQQCgyXIc</id>
        <link href="https://lizhenzhu.vercel.app//post/YQQCgyXIc">
        </link>
        <updated>2020-07-25T09:06:25.000Z</updated>
        <content type="html"><![CDATA[<pre><code>import os
import unittest
import vtk, qt, ctk, slicer
from slicer.ScriptedLoadableModule import *
import logging

#
# DisplayName_v2
#

class DisplayName_v2(ScriptedLoadableModule):
  &quot;&quot;&quot;Uses ScriptedLoadableModule base class, available at:
  https://github.com/Slicer/Slicer/blob/master/Base/Python/slicer/ScriptedLoadableModule.py
  &quot;&quot;&quot;
  def __init__(self, parent):
    ScriptedLoadableModule.__init__(self, parent)
    self.parent.title = &quot;DisplayName_v2&quot; # TODO make this more human readable by adding spaces
    self.parent.categories = [&quot;Examples&quot;]
    self.parent.dependencies = []
    self.parent.contributors = [&quot;John Doe (AnyWare Corp.)&quot;] # replace with &quot;Firstname Lastname (Organization)&quot;
    self.parent.helpText = &quot;&quot;&quot;
This is an example of scripted loadable module bundled in an extension.
It performs a simple thresholding on the input volume and optionally captures a screenshot.
&quot;&quot;&quot;
    self.parent.helpText += self.getDefaultModuleDocumentationLink()
    self.parent.acknowledgementText = &quot;&quot;&quot;
This file was originally developed by Jean-Christophe Fillion-Robin, Kitware Inc.
and Steve Pieper, Isomics, Inc. and was partially funded by NIH grant 3P41RR013218-12S1.
&quot;&quot;&quot; # replace with organization, grant and thanks.

#
# DisplayName_v2Widget
#

class DisplayName_v2Widget(ScriptedLoadableModuleWidget):
  &quot;&quot;&quot;Uses ScriptedLoadableModuleWidget base class, available at:
  https://github.com/Slicer/Slicer/blob/master/Base/Python/slicer/ScriptedLoadableModule.py
  &quot;&quot;&quot;
  def setup(self):
    ScriptedLoadableModuleWidget.setup(self)
    #
    # Parameters Area
    #
    parametersCollapsibleButton = ctk.ctkCollapsibleButton()
    parametersCollapsibleButton.text = &quot;Update&quot;
    self.layout.addWidget(parametersCollapsibleButton)
    # Layout within the dummy collapsible button
    parametersFormLayout = qt.QFormLayout(parametersCollapsibleButton)
    
    #
    # Start Button
    #
    self.startButton = qt.QPushButton(&quot;Start&quot;)
    self.startButton.toolTip = &quot;Run the algorithm.&quot;
    self.startButton.enabled = True
    parametersFormLayout.addRow(self.startButton)
    # connections
    self.startButton.connect('clicked(bool)', self.onstartButton)

    #
    # Stop Button
    #
    self.stopButton = qt.QPushButton(&quot;Stop&quot;)
    self.stopButton.toolTip = &quot;Stop the algorithm.&quot;
    self.stopButton.enabled = True
    parametersFormLayout.addRow(self.stopButton)
    # connections
    self.stopButton.connect('clicked(bool)', self.onstopButton)
    
    # Add vertical spacer
    self.layout.addStretch(1)

    self.logic = DisplayName_v2Logic()

  def cleanup(self):
    pass

  def onstartButton(self):
    self.logic.setupCrossHairTracker()

  def onstopButton(self):
    self.logic.stopCrossHairTracker()


#
# DisplayName_v2Logic
#

class DisplayName_v2Logic(ScriptedLoadableModuleLogic):
  &quot;&quot;&quot;This class should implement all the actual
  computation done by your module.  The interface
  should be such that other python code can import
  this class and make use of the functionality without
  requiring an instance of the Widget.
  Uses ScriptedLoadableModuleLogic base class, available at:
  https://github.com/Slicer/Slicer/blob/master/Base/Python/slicer/ScriptedLoadableModule.py
  &quot;&quot;&quot;
  def __init__(self):
    self.previousModelPrinted = &quot;None&quot; 

  #
  # Code executed on start button
  #
  def setupCrossHairTracker(self):
    print(&quot;Starting crosshair tracker&quot;)
    self.crosshairNode = slicer.util.getNode('Crosshair')
    # Set up observer for when tracker moves to execute class function printModelName
    self.observationId = self.crosshairNode.AddObserver(slicer.vtkMRMLCrosshairNode.CursorPositionModifiedEvent, self.printModelName)

  #
  # Code executed on stop button
  #
  def stopCrossHairTracker(self):
    self.crosshairNode.RemoveObserver(self.observationId)
    print(&quot;Stopped crosshair tracker&quot;)

  #
  # Code executed when crosshair is moved
  #
  def printModelName(self, observer, eventid):
    modelDisplayableManager = None
    threeDViewWidget = slicer.app.layoutManager().threeDWidget(0)
    managers = vtk.vtkCollection()
    threeDViewWidget.getDisplayableManagers(managers)
    for i in range(managers.GetNumberOfItems()):
      obj = managers.GetItemAsObject(i)
      if obj.IsA('vtkMRMLModelDisplayableManager'):
        modelDisplayableManager = obj
        break
    if modelDisplayableManager is None:
      logging.error('Failed to find the model displayable manager')

    crosshairNode = slicer.mrmlScene.GetNodeByID(&quot;vtkMRMLCrosshairNodedefault&quot;)
    modelDisplayableManager.Pick3D(crosshairNode.GetCrosshairRAS())

    # Only print name once and make sure that the crosshair is not on nothing
    if(slicer.mrmlScene.GetNodeByID(modelDisplayableManager.GetPickedNodeID())):
      modelNode = slicer.mrmlScene.GetNodeByID(modelDisplayableManager.GetPickedNodeID()).GetDisplayableNode()
      if(modelNode.GetName() != self.previousModelPrinted):
        print(modelNode.GetName()).split('_')[1]
        self.previousModelPrinted = modelNode.GetName() 
    #else:
      #print(&quot;Nothing Selected&quot;)


class DisplayName_v2Test(ScriptedLoadableModuleTest):
  &quot;&quot;&quot;
  This is the test case for your scripted module.
  Uses ScriptedLoadableModuleTest base class, available at:
  https://github.com/Slicer/Slicer/blob/master/Base/Python/slicer/ScriptedLoadableModule.py
  &quot;&quot;&quot;

  def setUp(self):
    &quot;&quot;&quot; Do whatever is needed to reset the state - typically a scene clear will be enough.
    &quot;&quot;&quot;
    slicer.mrmlScene.Clear(0)

  def runTest(self):
    &quot;&quot;&quot;Run as few or as many tests as needed here.
    &quot;&quot;&quot;
    self.setUp()
    self.test_DisplayName_v21()

  def test_DisplayName_v21(self):
    &quot;&quot;&quot; Ideally you should have several levels of tests.  At the lowest level
    tests should exercise the functionality of the logic with different inputs
    (both valid and invalid).  At higher levels your tests should emulate the
    way the user would interact with your code and confirm that it still works
    the way you intended.
    One of the most important features of the tests is that it should alert other
    developers when their changes will have an impact on the behavior of your
    module.  For example, if a developer removes a feature that you depend on,
    your test should break so they know that the feature is needed.
    &quot;&quot;&quot;
    pass
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[3D slicer中给模型赋予不同的颜色和透明度设定]]></title>
        <id>https://lizhenzhu.vercel.app//post/GBXt_FJlL</id>
        <link href="https://lizhenzhu.vercel.app//post/GBXt_FJlL">
        </link>
        <updated>2020-07-25T08:51:31.000Z</updated>
        <content type="html"><![CDATA[<pre><code>import os
import unittest
import vtk, qt, ctk, slicer
from slicer.ScriptedLoadableModule import *
import logging
import numpy as np

#
# Color_All_Visible_Models
#

class Color_All_Visible_Models(ScriptedLoadableModule):
  &quot;&quot;&quot;Uses ScriptedLoadableModule base class, available at:
  https://github.com/Slicer/Slicer/blob/master/Base/Python/slicer/ScriptedLoadableModule.py
  &quot;&quot;&quot;

  def __init__(self, parent):
    ScriptedLoadableModule.__init__(self, parent)
    self.parent.title = &quot;Color_All_Visible_Models&quot; # TODO make this more human readable by adding spaces
    self.parent.categories = [&quot;CustomExtensions&quot;]
    self.parent.dependencies = []
    self.parent.contributors = [&quot;Ryan Morrison&quot;] # replace with &quot;Firstname Lastname (Organization)&quot;
    self.parent.helpText = &quot;&quot;&quot;
This is an example of scripted loadable module bundled in an extension.
It performs a simple thresholding on the input volume and optionally captures a screenshot.
&quot;&quot;&quot;
    self.parent.helpText += self.getDefaultModuleDocumentationLink()
    self.parent.acknowledgementText = &quot;&quot;&quot;
This file was originally developed by Jean-Christophe Fillion-Robin, Kitware Inc.
and Steve Pieper, Isomics, Inc. and was partially funded by NIH grant 3P41RR013218-12S1.
&quot;&quot;&quot; # replace with organization, grant and thanks.

#
# Color_All_Visible_ModelsWidget
#

class Color_All_Visible_ModelsWidget(ScriptedLoadableModuleWidget):
  &quot;&quot;&quot;Uses ScriptedLoadableModuleWidget base class, available at:
  https://github.com/Slicer/Slicer/blob/master/Base/Python/slicer/ScriptedLoadableModule.py
  &quot;&quot;&quot;

  def setup(self):
    ScriptedLoadableModuleWidget.setup(self)

    # Instantiate and connect widgets ...

    #
    # Parameters Area
    #
    parametersCollapsibleButton = ctk.ctkCollapsibleButton()
    parametersCollapsibleButton.text = &quot;Update&quot;
    self.layout.addWidget(parametersCollapsibleButton)
    # Layout within the dummy collapsible button
    parametersFormLayout = qt.QFormLayout(parametersCollapsibleButton)

    #
    # Red value
    #
    self.imageThresholdSliderWidget_Red = ctk.ctkSliderWidget()
    self.imageThresholdSliderWidget_Red.singleStep = 1
    self.imageThresholdSliderWidget_Red.minimum = 0
    self.imageThresholdSliderWidget_Red.maximum = 255
    self.imageThresholdSliderWidget_Red.value = 0
    parametersFormLayout.addRow(&quot;Red&quot;, self.imageThresholdSliderWidget_Red)

    #
    # Green value
    #
    self.imageThresholdSliderWidget_Green = ctk.ctkSliderWidget()
    self.imageThresholdSliderWidget_Green.singleStep = 1
    self.imageThresholdSliderWidget_Green.minimum = 0
    self.imageThresholdSliderWidget_Green.maximum = 255
    self.imageThresholdSliderWidget_Green.value = 0
    parametersFormLayout.addRow(&quot;Green&quot;, self.imageThresholdSliderWidget_Green)

    #
    # Blue value
    #
    self.imageThresholdSliderWidget_Blue = ctk.ctkSliderWidget()
    self.imageThresholdSliderWidget_Blue.singleStep = 1
    self.imageThresholdSliderWidget_Blue.minimum = 0
    self.imageThresholdSliderWidget_Blue.maximum = 255
    self.imageThresholdSliderWidget_Blue.value = 0
    parametersFormLayout.addRow(&quot;Blue&quot;, self.imageThresholdSliderWidget_Blue)

    #
    # Opacity value
    #
    self.imageThresholdSliderWidget_Opacity = ctk.ctkSliderWidget()
    self.imageThresholdSliderWidget_Opacity.singleStep = 0.01
    self.imageThresholdSliderWidget_Opacity.minimum = 0
    self.imageThresholdSliderWidget_Opacity.maximum = 1
    self.imageThresholdSliderWidget_Opacity.value = 0
    parametersFormLayout.addRow(&quot;Opacity&quot;, self.imageThresholdSliderWidget_Opacity)
    
    #
    # Apply Button
    #
    self.startButton = qt.QPushButton(&quot;Apply Color&quot;)
    self.startButton.toolTip = &quot;Run the algorithm.&quot;
    self.startButton.enabled = True
    parametersFormLayout.addRow(self.startButton)
    # connections
    self.startButton.connect('clicked(bool)', self.onstartButton)

    
    # Add vertical spacer
    self.layout.addStretch(1)

    self.logic = Color_All_Visible_ModelsLogic()

  def cleanup(self):
    pass

  def onstartButton(self):
    red = int(self.imageThresholdSliderWidget_Red.value)
    green = int(self.imageThresholdSliderWidget_Green.value)
    blue = int(self.imageThresholdSliderWidget_Blue.value)
    opacity = int(self.imageThresholdSliderWidget_Blue.value)
    self.logic.applyColor(red,green,blue,opacity)

#
# Color_All_Visible_ModelsLogic
#

class Color_All_Visible_ModelsLogic(ScriptedLoadableModuleLogic):
  &quot;&quot;&quot;This class should implement all the actual
  computation done by your module.  The interface
  should be such that other python code can import
  this class and make use of the functionality without
  requiring an instance of the Widget.
  Uses ScriptedLoadableModuleLogic base class, available at:
  https://github.com/Slicer/Slicer/blob/master/Base/Python/slicer/ScriptedLoadableModule.py
  &quot;&quot;&quot;

  #
  # Code executed when button pressed
  #
  def applyColor(self,red,green,blue,opacity):
    print(&quot;Color applied: &quot; + str(red) + &quot;,&quot; + str(green) + &quot;,&quot; + str(blue) + &quot;, with opacity:&quot; + str(opacity))

    modelDisplayableManager = None
    threeDViewWidget = slicer.app.layoutManager().threeDWidget(0)
    managers = vtk.vtkCollection()
    threeDViewWidget.getDisplayableManagers(managers)
    for i in range(managers.GetNumberOfItems()):
      obj = managers.GetItemAsObject(i)
      if obj.IsA('vtkMRMLModelDisplayableManager'):
        modelDisplayableManager = obj
        break
    if modelDisplayableManager is None:
      logging.error('Failed to find the model displayable manager')


    #TODO set color and opacity to all visible models      


class Color_All_Visible_ModelsTest(ScriptedLoadableModuleTest):
  &quot;&quot;&quot;
  This is the test case for your scripted module.
  Uses ScriptedLoadableModuleTest base class, available at:
  https://github.com/Slicer/Slicer/blob/master/Base/Python/slicer/ScriptedLoadableModule.py
  &quot;&quot;&quot;

  def setUp(self):
    &quot;&quot;&quot; Do whatever is needed to reset the state - typically a scene clear will be enough.
    &quot;&quot;&quot;
    slicer.mrmlScene.Clear(0)

  def runTest(self):
    &quot;&quot;&quot;Run as few or as many tests as needed here.
    &quot;&quot;&quot;
    self.setUp()
    self.test_Color_All_Visible_Models1()

  def test_Color_All_Visible_Models1(self):
    &quot;&quot;&quot; Ideally you should have several levels of tests.  At the lowest level
    tests should exercise the functionality of the logic with different inputs
    (both valid and invalid).  At higher levels your tests should emulate the
    way the user would interact with your code and confirm that it still works
    the way you intended.
    One of the most important features of the tests is that it should alert other
    developers when their changes will have an impact on the behavior of your
    module.  For example, if a developer removes a feature that you depend on,
    your test should break so they know that the feature is needed.
    &quot;&quot;&quot;

    self.delayDisplay(&quot;Starting the test&quot;)
    #
    # first, get some data
    #
    pass
</code></pre>
<p>另一种方法就是将模型遍历，然后随机赋予颜色。</p>
<pre><code>for modelNode in slicer.util.getNodesByClass(&quot;vtkMRMLModelNode&quot;):
  if modelNode.GetHideFromEditors():
    continue # Skip hidden nodes, such as Red/Green/Yellow slice models
  modelDisplayNode = modelNode.GetDisplayNode()
  modelDisplayNode.SetColor(red,green,blue)
  modelDisplayNode.SetOpacity(opacity)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一种快速的3D模型压缩方法]]></title>
        <id>https://lizhenzhu.vercel.app//post/n8SS4NXv8</id>
        <link href="https://lizhenzhu.vercel.app//post/n8SS4NXv8">
        </link>
        <updated>2020-07-25T08:50:52.000Z</updated>
        <content type="html"><![CDATA[<p>在Slicer中的Decimation模块中添加了新的表面简化（简化）方法。QuadQuad及其近似但更快的版本，FastQuadric方法提供的质量比以前的DecimatePro方法高得多。</p>
<p>例：</p>
<p><a href="https://aws1.discourse-cdn.com/standard17/uploads/slicer/original/2X/4/49b6251df3e6d4a887c11b4658e157cdcfbc2115.jpeg" title="图片"><img src="https://aws1.discourse-cdn.com/standard17/uploads/slicer/optimized/2X/4/49b6251df3e6d4a887c11b4658e157cdcfbc2115_2_462x500.jpeg" alt="图片"></a>
图片2214×2395 1000 KB</p>
<p>最新的Slicer Preview版本中提供了该功能。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[3D dsa数据加载]]></title>
        <id>https://lizhenzhu.vercel.app//post/ltO6Pjz5Q</id>
        <link href="https://lizhenzhu.vercel.app//post/ltO6Pjz5Q">
        </link>
        <updated>2020-07-25T08:49:00.000Z</updated>
        <content type="html"><![CDATA[<p>该系列由西门子Axiom Artis机器人C型臂创建，该C型臂可通过旋转XA采集重建锥形束CT。该系列包含一个重建的3D体积和一个定位器图像。</p>
<p>本地化程序图像的存在会干扰默认加载，因此，现在您需要打开“高级”部分，并按imageType选择两个可加载项。其中一个是本地化图像，另一个是体积：</p>
<p><a href="https://aws1.discourse-cdn.com/standard17/uploads/slicer/original/2X/b/bb167dbf0501e9037491ae16cdcad43c712792a5.png" title="图片"><img src="https://aws1.discourse-cdn.com/standard17/uploads/slicer/optimized/2X/b/bb167dbf0501e9037491ae16cdcad43c712792a5_2_690x416.png" alt="图片"></a>
图片2255×1362 413 KB</p>
<p>加载的3D体积：</p>
<p><a href="https://aws1.discourse-cdn.com/standard17/uploads/slicer/original/2X/a/ace4042daa8dfb8b91362b27fc17c7f600f84523.jpeg" title="图片"><img src="https://aws1.discourse-cdn.com/standard17/uploads/slicer/optimized/2X/a/ace4042daa8dfb8b91362b27fc17c7f600f84523_2_690x419.jpeg" alt="图片"></a>
图片2255×1370 630 KB</p>
<p>我已经在DICOM模块中实现了一种机制，以检测此类定位器图像并使用默认设置正确加载音量。目前<a href="https://github.com/Slicer/Slicer/pull/5055">，</a>它正在<a href="https://github.com/Slicer/Slicer/pull/5055">接受审核</a>，几天后可能会在Slicer Preview版本中提供。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[3D slicer后台加载module]]></title>
        <id>https://lizhenzhu.vercel.app//post/47tOmy018</id>
        <link href="https://lizhenzhu.vercel.app//post/47tOmy018">
        </link>
        <updated>2020-06-27T08:27:32.000Z</updated>
        <content type="html"><![CDATA[<pre><code>import ExtensionWizard as ew
path='D:/DICOM2PNG'
ew.ExtensionWizardWidget().loadModules(path=path)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[3D slicer中视频的分辨率]]></title>
        <id>https://lizhenzhu.vercel.app//post/I9fNHn4wV</id>
        <link href="https://lizhenzhu.vercel.app//post/I9fNHn4wV">
        </link>
        <updated>2020-06-27T05:01:18.000Z</updated>
        <content type="html"><![CDATA[<p>默认情况下，在3D视图中显示的图像分辨率与在切片视图中显示的图像分辨率相同。在极端情况下，这确实可能会导致在3D视图中显示较低的分辨率，这可能不是您所期望的：</p>
<p><a href="https://aws1.discourse-cdn.com/standard17/uploads/slicer/original/2X/5/58d094cc8d9ac601cde14800feef9bc8bf35c7ec.jpeg" title="图片"><img src="https://aws1.discourse-cdn.com/standard17/uploads/slicer/optimized/2X/5/58d094cc8d9ac601cde14800feef9bc8bf35c7ec_2_690x497.jpeg" alt="图片"></a>
图片1640×1183 547 KB</p>
<p>如果要将3D视图的分辨率与切片视图的分辨率解耦，则可以在切片视图可见性子菜单中选择“间距匹配体积”选项之一：</p>
<p><a href="https://aws1.discourse-cdn.com/standard17/uploads/slicer/original/2X/3/31c48789697f356cfd0506090a9aebb30daed128.jpeg" title="图片"><img src="https://aws1.discourse-cdn.com/standard17/uploads/slicer/optimized/2X/3/31c48789697f356cfd0506090a9aebb30daed128_2_690x487.jpeg" alt="图片"></a>
图片1676×1184 835 KB</p>
<p>您使用哪种图像</p>
]]></content>
    </entry>
</feed>